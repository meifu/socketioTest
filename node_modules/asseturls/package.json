{
  "name": "asseturls",
  "version": "0.0.4",
  "description": "Manage cachebusting asset URLs in node",
  "main": "./lib/asseturls.js",
  "bin": {
    "asseturls-tool": "./bin/asseturls-tool"
  },
  "directories": {
    "lib": "./lib"
  },
  "homepage": "https://github.com/hlandau/node-asseturls",
  "repository": {
    "type": "git",
    "url": "https://github.com/hlandau/node-asseturls.git"
  },
  "bugs": {
    "url": "https://github.com/hlandau/node-asseturls/issues",
    "email": "hlandau@devever.net"
  },
  "keywords": [
    "express",
    "cachebusting",
    "assets",
    "url"
  ],
  "author": {
    "name": "Hugo Landau",
    "email": "hlandau@devever.net"
  },
  "license": "MIT",
  "dependencies": {
    "netmask": "~0.0.2",
    "commander": "~1.0.4"
  },
  "readme": "node-asseturls\n==============\n\nTiny library for the management of cachebusting asset URLs. MIT License.\n\nMotivation\n----------\nA way to tell templates what hashed resource URLs should currently be used, without having to mess around with asset-handling middleware. If you like the idea of using hashed resource URLs but prefer to work with a toolchain or a watch daemon for assembling client-side resources, asseturls is for you.\n\n[More information on hashed resource URLs and why you would want to use them.](https://developers.google.com/speed/docs/best-practices/caching)\n\nInstallation\n------------\n\n```\n  $ npm install asseturls\n```\n\nOverview\n--------\nWhat this does:\n  * You call `asset_url(\"css/example.css\")` in your templates.\n  * Depending on your configuration, this returns either the same\n    URL (but made absolute to some base URL), or a hashed URL.\n  * You can update the asset configuration without restarting node\n    using an HTTP API. You can disable this API if you like. Access\n    to the API is secured by IP, by fixed token, or both.\n\nExample Jade template usage:\n```\n  link(rel='stylesheet', href=asset_url('css/test.css'))\n```\n\nWith the configuration below, this results in:\n```html\n  <link rel=\"stylesheet\" href=\"/css/test-11223344.css\" />\n```\n\nIf you specify an URL not configured in the configuration block,\nit gets resolved relative to baseUrl and passed through:\n```\n  link(rel='stylesheet', href=asset_url('css/other-test.css'))\n```\n```html\n  <link rel=\"stylesheet\" href=\"/css/other-test.css\" />\n```\n\nIncludes Express middleware to implement the API. You don't need the middleware if you don't want the API. In this case, just call `asseturls` with your configuration to set everything up and set `global.asset_url`, but don't pass it to `app.use`.\n\nExample Express usage:\n```javascript\n  var asseturls = require('asseturls');\n  app.use(asseturls({\n    baseUrl: '/', // all URLs below will be interpreted relative to this\n    assets: {\n      // when you call asset_url('css/test.css'), it gets mapped\n      // to '/css/test-11223344.css'. Note baseUrl addition.\n      'css/test.css': 'css/test-11223344.css',\n    },\n\n    // set to true if you don't want assets to be resolved to their\n    // hashed name, but just joined to baseUrl and returned as is.\n    dummyMode: false,\n\n    // set to true if you want to be able to update this configuration\n    // via a POST request\n    enableApi: true,\n    // An array of CIDR masks specifying what hosts can update the\n    // configuration.\n    apiRanges: ['127.0.0.0/8'],\n    // A host must present one of these tokens to update the\n    // configuration.\n    apiTokens: ['password'],\n\n    // If authentication fails the entire middleware falls through\n    // silently, so you get a 404.\n  }));\n  // make the function available to templates\n  app.locals.asset_url = global.asset_url;\n```\n\nCommand Line Tool\n-----------------\nYou can use the `asseturls-tool` to get and set the asseturls configuration\nto and from a JSON file. Run `asseturls-tool` with no arguments to set the configuration from `assets.json` at `localhost:3000` with the token specified in `assets.json`. Run `asseturls-tool --help` for more information.\n\nSome examples:\n\n```\n  # Set the configuration from assets.json.\n  asseturls-tool\n  asseturls-tool -s\n\n  # Get the configuration and put it in assets.json.\n  asseturls-tool -g\n\n  # Set the configuration in a.json, authenticating with the token in b.json.\n  asseturls-tool -s -f a.json -F b.json\n\n  # Get the configuration and put it in x.json, overwriting it if it exists.\n  # Authenticate from y.json.\n  asseturls-tool -g -f x.json -F y.json -o\n\n  # Manipulate a different server.\n  asseturls-tool -a \"example.com:81\"\n```\n\nContributing\n------------\nContact me if:\n  * you have found a bug\n  * you have created a patch\n  * you have feedback about this package\n  * you have discovered something much better that already exists\n\n",
  "readmeFilename": "README.md",
  "_id": "asseturls@0.0.4",
  "_from": "asseturls@*"
}
