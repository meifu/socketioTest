#!/usr/bin/env node
var
  fs = require('fs'),
  commander = require('commander'),
  http = require('http'),
  querystring = require('querystring')
  ;

options = {rc:0};
commander.usage('[options]')
  .option('-f, --asset-file <filename>', 'assets file (default: assets.json)')
  .option('-a, --address <hostname:port>', 'server address (default: localhost:3000)')
  .option('-g, --get', 'get configuration')
  .option('-s, --set', 'set configuration (default)')
  .option('-F, --old-asset-file <filename>', 'old assets file (for gleaing token)')
  .option('-t, --token <token>', 'security token (default: get from assets file)')
  .option('-o, --overwrite', 'overwrite assets file when retrieving configuration');

commander.on('--help', function() {
  console.log('Examples:');
  console.log('  asseturls-tool -g -a localhost:3000 -t password');
  console.log('    Get the configuration from a site.');
  console.log('');
  console.log('  asseturls-tool');
  console.log('    Set the configuration for localhost:3000 from assets.json,');
  console.log('    gleaning the security token from assets.json.');
  console.log('');
  console.log('  asseturls-tool -f assets.json -F oldassets.json');
  console.log('    Set the configuration to assets.json, using the token in');
  console.log('    oldassets.json. Useful if you are changing the token.');
  options.rc = 5;
});

function get_token() {
  if (options.token) return options.token;
  var fn = options.oldAssetFile;
  if (!fn) fn = options.assetFile;
  var D = fs.readFileSync(fn, 'utf8');
  var d = JSON.parse(D);
  if (!d.apiTokens || d.apiTokens.length < 1) {
    console.log("Couldn't get token from file '" + fn + "'");
    return;
  }
  options.token = d.apiTokens[0];
  return options.token;
};

function run_get() {
  if (options.assetFile && options.assetFile != '-' && fs.existsSync(options.assetFile) && !options.overwrite) {
    console.log("File already exists; specify -o to overwrite.");
    options.rc = 3;
    return;
  }

  var req = http.request({
    host: options.hostname, port: options.port,
    method: 'GET', path: '/.asseturls?token=' + get_token()
  }, function(res) {
    res.setEncoding('utf8');
    if (!res.headers['content-type'].match(/^application\/json(;|$)/)) {
      console.log("Got non-JSON response. Check that the server is asseturls-enabled, you are connecting from an authorized IP, and the security token is correctly configured.");
      options.rc = 2;
      return;
    }
    var f;
    if (options.assetFile)
      f = fs.createWriteStream(options.assetFile, {flags:'w'});
    else
      f = process.stdout;
    options.data = '';
    res.on('data', function(chunk) {
      options.data += chunk;
    });
    res.on('end', function(chunk) {
      if (chunk) options.data += chunk;
      var x = JSON.parse(options.data);
      f.write(JSON.stringify(x.config, null, 2));
      f.end();
    });
  });
  req.on('error', function(e) {
    console.log('Error retrieving asset configuration');
    options.rc = 3;
  });
  req.end();
};

function run_set() {
  var req = http.request({
    host: options.hostname, port: options.port,
    method: 'POST', path: '/.asseturls', headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
    }}, function(res) {
    res.setEncoding('utf8');
    if (res.statusCode != 200) {
      console.log('Error setting asset configuration (HTTP status '+res.statusCode+')');
      options.rc = 6;
    }
  });
  req.on('error', function(e) {
    console.log('Error setting asset configuration');
    options.rc = 4;
  });
  var D = fs.readFileSync(options.assetFile, 'utf8');
  var config = JSON.parse(D);
  var qs = querystring.stringify({token:get_token(),'config':JSON.stringify(config)});
  req.write(qs);
  req.end();
};

commander.parse(process.argv);
options.assetFile = commander.assetFile || "assets.json";
options.oldAssetFile = commander.oldAssetFile || null;
options.address   = commander.address   || "localhost:3000";
options.token     = commander.token || null;
options.overwrite = commander.overwrite || false;

var a = options.address.split(":",2);
options.hostname = a[0];
if (a.length > 1) options.port = parseInt(a[1]);

if (commander.get && commander.set) {
  console.log("Cannot specify both --get and --set");
  options.rc = 7;
} else if (commander.get) {
  run_get();
} else {
  run_set();
}

process.exit(options.rc);


